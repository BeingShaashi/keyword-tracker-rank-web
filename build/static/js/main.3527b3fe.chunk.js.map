{"version":3,"sources":["api.js","App.js","serviceWorker.js","index.js"],"names":["api","uri","params","axios","get","headers","then","a","response","data","App","state","datasets","labels","keyword","productId","this","load","console","log","className","value","onChange","e","setState","target","onClick","bind","options","legend","display","position","query","info","ranks","map","x","moment","ts","format","absoluteRanks","absoluteRank","pageCount","label","fill","lineTension","borderColor","pointRadius","pointHitRadius","warn","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kSAIMA,EAAM,CAEZA,IAAU,SAACC,EAAKC,GACd,OAAOC,IACJC,IANS,6BAMKH,EAAK,CAClBI,QAAS,CACP,eAAgB,oBAElBH,WAEDI,KAPI,+BAAAC,EAAA,MAOC,WAAOC,GAAP,SAAAD,EAAA,+EACGC,EAASC,MADZ,2CAPD,yDAYMT,IC4FAU,E,4MAzGbC,MAAQ,CACNC,SAAU,GACVC,OAAQ,GACRC,QAAS,YACTC,UAAW,c,kEAIXC,KAAKC,S,+BAGG,IAAD,OAGP,OAFAC,QAAQC,IAAIH,KAAKL,OAGf,yBAAKS,UAAU,OACf,yBAAKA,UAAU,YACb,yBAAKA,UAAU,YACb,yCACU,IACR,2BACEC,MAAOL,KAAKL,MAAMG,QAClBQ,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAEV,QAASS,EAAEE,OAAOJ,YAGvD,2CACY,IACV,2BACEA,MAAOL,KAAKL,MAAMI,UAClBO,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAET,UAAWQ,EAAEE,OAAOJ,YAGzD,4BAAQK,QAASV,KAAKC,KAAKU,KAAKX,OAAhC,SAGF,yBAAKI,UAAU,kBACb,kBAAC,OAAD,CACEX,KAAM,CACJG,SAAUI,KAAKL,MAAMC,SACrBC,OAAQG,KAAKL,MAAME,QAErBe,QAAS,CAMPC,OAAQ,CACNC,SAAS,EACTC,SAAU,iB,uKAadC,EAAQ,CACZlB,QAASE,KAAKL,MAAMG,QACpBC,UAAWC,KAAKL,MAAMI,WAGxBG,QAAQe,KAAK,CAAED,U,SAEOhC,EAAII,IAAI,UAAW4B,G,gBAAnCE,E,EAAAA,MACNhB,QAAQe,KAAK,CAAEC,UAEXrB,E,OAASqB,Q,IAAAA,O,EAAAA,EAAOC,KAAI,SAACC,GAAD,OAAOC,IAAOD,EAAEE,IAAIC,OAAO,yBAC/CC,EAAgBN,EAAMC,KAAI,SAACC,GAAD,OAAOA,EAAEK,gBACnCC,EAAYR,EAAMC,KAAI,SAACC,GAAD,OAAOA,EAAEM,aAEnC1B,KAAKQ,SAAS,CACZZ,SAAU,CACR,CACE+B,MAAO,OACPC,MAAM,EACNC,YAAa,GACbC,YAAa,qBACbC,YAAa,EACbC,eAAgB,GAChBvC,KAAM+B,GAER,CACEG,MAAO,OACPC,MAAM,EACNC,YAAa,GACbC,YAAa,oBACbC,YAAa,EACbC,eAAgB,GAChBvC,KAAMiC,IAGV7B,W,kDAGFK,QAAQ+B,KAAR,M,qHArGYC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.3527b3fe.chunk.js","sourcesContent":["import axios from \"axios\";\n\nlet API_URL = \"http://localhost:3001/api/\";\n\nconst api = {};\n\napi.get = (uri, params) => {\n  return axios\n    .get(API_URL + uri, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      params,\n    })\n    .then(async (response) => {\n      return response.data;\n    });\n};\n\nexport default api;\n","import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport { Line } from \"react-chartjs-2\";\nimport api from \"./api\";\n\nclass App extends Component {\n  state = {\n    datasets: [],\n    labels: [],\n    keyword: \"headphone\",\n    productId: \"B00NJ2M33I\",\n  };\n\n  componentDidMount() {\n    this.load();\n  }\n\n  render() {\n    console.log(this.state);\n\n    return (\n      <div className=\"app\">\n      <div className=\"chartbox\">\n        <div className=\"inputBox\">\n          <label>\n            Keyword{\" \"}\n            <input\n              value={this.state.keyword}\n              onChange={(e) => this.setState({ keyword: e.target.value })}\n            />\n          </label>\n          <label>\n            ProductID{\" \"}\n            <input\n              value={this.state.productId}\n              onChange={(e) => this.setState({ productId: e.target.value })}\n            />\n          </label>\n          <button onClick={this.load.bind(this)}>Load</button>\n        </div>\n\n        <div className=\"chartcontainer\">\n          <Line\n            data={{\n              datasets: this.state.datasets,\n              labels: this.state.labels,\n            }}\n            options={{\n              // title: {\n              //   display: true,\n              //   text: \"\",\n              //   fontSize: 20,\n              // },\n              legend: {\n                display: true,\n                position: \"right\",\n              },\n            }}\n          />\n        </div>\n\n      </div>\n      </div>\n    );\n  }\n\n  async load() {\n    try {\n      const query = {\n        keyword: this.state.keyword,\n        productId: this.state.productId,\n      };\n\n      console.info({ query });\n\n      let { ranks } = await api.get(\"v1/rank\", query);\n      console.info({ ranks });\n\n      let labels = ranks?.map((x) => moment(x.ts).format(\"DD MMM YY, hh:mm a\"));\n      let absoluteRanks = ranks.map((x) => x.absoluteRank);\n      let pageCount = ranks.map((x) => x.pageCount);\n\n      this.setState({\n        datasets: [\n          {\n            label: \"Rank\",\n            fill: false,\n            lineTension: 0.1,\n            borderColor: \"rgba(75,192,192,1)\",\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: absoluteRanks,\n          },\n          {\n            label: \"Page\",\n            fill: false,\n            lineTension: 0.1,\n            borderColor: \"rgba(75,75,192,1)\",\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: pageCount,\n          },\n        ],\n        labels,\n      });\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}